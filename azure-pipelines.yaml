name: Azure Pipelines

trigger:
- main

variables:
  python.version: '3.7.6'
  azureServiceConnectionId: 'myServiceConnection'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'test-vm'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    pool:
      name: myAgentPool
    steps:
    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      displayName: 'Terraform installation'
      inputs:
        terraformVersion: '1.6.3'

    # Run Terraform Init on the pipeline agent 
    - task: TerraformTaskV4@4
      displayName: 'Terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: 'myServiceConnection'
        backendAzureRmResourceGroupName: 'Azuredevops'
        backendAzureRmStorageAccountName: 'tfstate182077659'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'PelEU7sFMN3WBuM4M7XVU5yHxKYE0Yan2qK7JDokugAzi0+EwxvLtdArENojqY2YdkZamt5FOj5b+AStqUWAQQ=='
    
    # Run Terraform validate on the pipeline agent 
    - task: TerraformTaskV4@4
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    # Run Terraform Apply
    - task: TerraformTaskV4@4
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    #--------------------------------------------#   
    # Install Node.js
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSource: 'spec'
        versionSpec: '16.x'

    # Verify npm installation
    - task: CmdLine@2
      displayName: Verify npm
      inputs:
        script: 'npm --version'

    # Install Newman
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
        
    # Postman Data Validation Test Suite    
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman Regression Test Suite    
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman - Publish Results 
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)'
        mergeTestResults: true
        testRunTitle: 'Postman Tests'

    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip
      displayName: 'Upload Package'
      artifact: drop-uitests

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    # JMeter Test Suite - Publish    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Package'
      artifact: drop-perftests

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  - deployment: FakeRestAPI
    pool:
      name: 'myAgentPool'
    environment: "VM-myApplication"
    strategy:
      runOnce:
        deploy:
          steps:
          # Deploy the Azure Web App
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'
              appName: 'myApplication-AppService'
              appType: webApp
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
              deploymentMethod: 'auto'
          
          # Install Java
          - task: Bash@3
            displayName: Install Java
            inputs:
              targetType: 'inline'
              script: |
                sudo apt update
                sudo apt install -y openjdk-11-jdk
                echo "JAVA_HOME=$(dirname $(dirname $(readlink -f $(which javac))))" | sudo tee -a /etc/environment
                source /etc/environment
                echo "Java installed and JAVA_HOME set to $JAVA_HOME"

          # Jmeter installation
          - task: Bash@3
            displayName: Install JMeter
            inputs:
              targetType: 'inline'
              script: |
                wget "https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.6.3.tgz"
                tar -xvzf apache-jmeter-5.6.3.tgz
                
                # Check if the JMeter directory already exists
                if [ -d "/opt/apache-jmeter-5.6.3" ]; then
                    echo "JMeter directory already exists. Skipping move."
                else
                    sudo mv apache-jmeter-5.6.3 /opt/
                fi
                
                # Check if the symbolic link already exists
                if [ -L /usr/local/bin/jmeter ]; then
                    echo "JMeter symbolic link already exists. Skipping link creation."
                else
                    sudo ln -s /opt/apache-jmeter-5.6.3/bin/jmeter /usr/local/bin/jmeter
                fi
                
          # JMeter - Run the Endurance Test Suite
          - task: Bash@3
            displayName: Endurance Test
            inputs:
              targetType: 'inline'
              script: |
                source /etc/environment
                jmeter -n -t "automatedtesting/jmeter/EnduranceTestSuite.jmx" \
                  -Jresdir="automatedtesting/jmeter/endurancepages.csv" \
                  -l "automatedtesting/jmeter/report/enduranceresults.jtl" \
                  -e -o "automatedtesting/jmeter/endurancereport"

          # Run the JMeter Stress Test Suite
          - task: Bash@3
            displayName: Stress Test
            inputs:
              targetType: 'inline'
              script: |
                source /etc/environment
                jmeter -n -t "automatedtesting/jmeter/StressTestSuite.jmx" \
                  -Jresdir="automatedtesting/jmeter/stresspages.csv" \
                  -l "automatedtesting/jmeter/report/stressresults.jtl" \
                  -e -o "automatedtesting/jmeter/stressreport"

          # Archive the JMeter log files
          - task: ArchiveFiles@2
            displayName: Archive JMeter Log Files
            inputs:
              rootFolderOrFile: "automatedtesting/jmeter/report"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "jmeter-reports-$(Build.BuildId).zip"
              verbose: true

          # Publish the JMeter log files
          - task: PublishBuildArtifacts@1
            displayName: Publish JMeter Artifacts
            inputs:
              PathtoPublish: 'automatedtesting/jmeter/report'
              ArtifactName: 'jmeter-results'
              publishLocation: 'Container'

  #--------------------------------------------#  
  # Selenium | Functional UI Tests
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment:
      name: "VM-myApplication"
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-uitests
            patterns: '**/*.zip'
            
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash

                # Uninstall chromium-browser if it is installed
                sudo apt-get remove -y chromium-browser

                # Install dependencies
                sudo apt install python3.7 -y
                sudo apt-get install python3.7-venv -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install wget -y
                sudo apt-get install -y libxss1 libappindicator1 libindicator7

                # Download and install Google Chrome
                wget -P /tmp https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
                sudo apt install -y /tmp/google-chrome-stable_current_amd64.deb
                rm /tmp/google-chrome-stable_current_amd64.deb

                # Set up app directory
                cd ~/
                DIR=/home/azureuser/app
                if [ ! -d "$DIR" ]; then
                    mkdir app
                fi

                mv /home/azureuser/azagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip app
                cd app
                unzip -o $(Build.BuildId)-uitests.zip

                # Determine installed Chrome version
                CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+' | head -1)

                # Download the matching chromedriver version
                FILE=/home/azureuser/app/chromedriver_linux64.zip
                if [ ! -f "$FILE" ]; then
                    # Fetch the latest ChromeDriver version that matches the installed Chrome version
                    LATEST=$(wget -q -O - "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION")
                    wget "https://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip"
                    unzip -o chromedriver_linux64.zip
                fi

                # Remove existing chromedriver symbolic link if it exists
                if [ -L /usr/local/bin/chromedriver ]; then
                    sudo rm /usr/local/bin/chromedriver
                fi

                # Create a new symbolic link for chromedriver
                sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver

                # Add chromedriver to PATH
                export PATH=$PATH:/home/azureuser/app

                # Make virtual environment
                python3.7 -m venv venv
                source venv/bin/activate

                # Install selenium using the virtual environment's pip
                pip install selenium

                # Log Chrome and ChromeDriver versions for debugging
                google-chrome --version
                chromedriver --version

                # Starting Selenium tests using the virtual environment's Python
                echo "Starting Selenium Tests"
                python add_remove_from_cart.py >> selenium.log
                echo "Completed Selenium Tests. Check selenium.log for results."

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/selenium.log'
              searchFolder: '/home/azureuser/app'
              mergeTestResults: true
              testRunTitle: 'Selenium Tests'
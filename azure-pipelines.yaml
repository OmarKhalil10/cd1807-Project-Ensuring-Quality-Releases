name: Azure Pipelines

trigger:
- main

variables:
  python.version: '3.7.6'
  azureServiceConnectionId: 'myServiceConnection'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'test-vm'
  resourceGroupName: 'Azuredevops'
  appServiceName: 'myApplication-AppService'
  workspace-name: 'log-analytics-workspace'
  email: 'omar.khalil498@gmail.com'

stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    pool:
      name: myAgentPool
    steps:

    #--------------------------------------------#  
    # Use Terraform to create the Infrastructure      
    # Install Terraform on the pipeline agent 
    - task: JasonBJohnson.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      displayName: 'Terraform installation'
      inputs:
        terraformVersion: '1.6.3'

    # Run Terraform Init on the pipeline agent 
    - task: TerraformTaskV4@4
      displayName: 'Terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: 'myServiceConnection'
        backendAzureRmResourceGroupName: '$(resourceGroupName)'
        backendAzureRmStorageAccountName: 'tfstate2330325985'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: '6iK9aOWfxGaHVJvb9JkTyPRjXrqr/KE1noB2+QgxUA/SLyRtcLoS70cORbo07kg/w4pgaOVI647A+ASt03Actw=='
    
    # Run Terraform validate on the pipeline agent 
    - task: TerraformTaskV4@4
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    # Run Terraform Apply
    - task: TerraformTaskV4@4
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # ToDo: Change the workingDirectory path, as applicable to you
    # Destroy the resources in Azure by running a separate pipeline. 
    # - task: TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    #--------------------------------------------#   
    # Install Node.js
    - task: NodeTool@0
      displayName: 'Install Node.js'
      inputs:
        versionSource: 'spec'
        versionSpec: '16.x'

    # Verify npm installation
    - task: CmdLine@2
      displayName: Verify npm
      inputs:
        script: 'npm --version'

    # Install Newman
    - task: CmdLine@2
      displayName: Install Newman
      inputs:
        script: 'npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)
        
    # Postman Data Validation Test Suite    
    - task: CmdLine@2
      displayName: Run Data Validation Tests
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Data-Validation.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-DataValidation.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman Regression Test Suite    
    - task: CmdLine@2
      displayName: Run Regression Tests
      continueOnError: true
      inputs:
        script: 'newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
    # Postman - Publish Results 
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)'
        mergeTestResults: true
        testRunTitle: 'Postman Tests'

    
    #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    # Selenium Test Suite - Publish the package  
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip
      displayName: 'Upload Package'
      artifact: drop-uitests

    #--------------------------------------------#    
    # FakeRestAPI - Archive
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

    #--------------------------------------------#  
    # JMeter (Performance) Test Suite - Archive
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    # JMeter Test Suite - Publish    
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Upload Package'
      artifact: drop-perftests

#--------------------------------------------#  
# DEPLOYMENT STAGE
#--------------------------------------------#    
- stage: Deploy
  jobs:
  #--------------------------------------------#  
  # Deploy FakeRestAPI Web App
  - deployment: FakeRestAPI
    pool:
      name: 'myAgentPool'
    environment: "test-vm"
    strategy:
      runOnce:
        deploy:
          steps:
          # Debugging step to print variables
          - script: |
              echo "Azure Service Connection ID: $(azureServiceConnectionId)"
              echo "App Name: myApplication-AppService"
              echo "Package Path: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip"
            displayName: 'Print Variables'

          # Debugging step to check artifact accessibility
          - script: |
              if [ -f "$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip" ]; then
                echo "Artifact exists and is accessible."
              else
                echo "Artifact does not exist or is not accessible."
              fi
            displayName: 'Check Artifact Accessibility'

          # Package Verification (Optional)
          - task: Bash@3
            displayName: 'Verify ZIP Package'
            inputs:
              targetType: 'inline'
              script: |
                echo "Listing package contents..."
                ls -l $(Pipeline.Workspace)/drop-fakerestapi
  
          # Install Azure CLI
          - task: Bash@3
            displayName: 'Install Azure CLI'
            inputs:
              targetType: 'inline'
              script: |
                curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

          # Deploy the Application to Azure Web App
          - task: AzureCLI@2
            displayName: 'Deploy the Application to Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                az webapp deployment source config-zip \
                  --resource-group $(resourceGroupName) \
                  --name $(appServiceName) \
                  --src $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
        
          # Install Java
          - task: Bash@3
            displayName: Install Java
            inputs:
              targetType: 'inline'
              script: |
                sudo apt update
                sudo apt install -y openjdk-11-jdk
                echo "JAVA_HOME=$(dirname $(dirname $(readlink -f $(which javac))))" | sudo tee -a /etc/environment
                source /etc/environment
                echo "Java installed and JAVA_HOME set to $JAVA_HOME"

          # Jmeter installation
          - task: Bash@3
            displayName: Install JMeter
            inputs:
              targetType: 'inline'
              script: |
                wget "https://dlcdn.apache.org//jmeter/binaries/apache-jmeter-5.6.3.tgz"
                tar -xvzf apache-jmeter-5.6.3.tgz
                
                # Check if the JMeter directory already exists
                if [ -d "/opt/apache-jmeter-5.6.3" ]; then
                    echo "JMeter directory already exists. Skipping move."
                else
                    sudo mv apache-jmeter-5.6.3 /opt/
                fi
                
                # Check if the symbolic link already exists
                if [ -L /usr/local/bin/jmeter ]; then
                    echo "JMeter symbolic link already exists. Skipping link creation."
                else
                    sudo ln -s /opt/apache-jmeter-5.6.3/bin/jmeter /usr/local/bin/jmeter
                fi
                
          # JMeter - Run the Endurance Test Suite
          - task: Bash@3
            displayName: Endurance Test
            inputs:
              targetType: 'inline'
              script: |
                source /etc/environment
                jmeter -n -t "automatedtesting/jmeter/EnduranceTest.jmx" \
                  -Jresdir="automatedtesting/jmeter/book_ids.csv" \
                  -l "automatedtesting/jmeter/enduranceresults.jtl" \
                  -e -o "automatedtesting/jmeter/endurancereport"

          # Run the JMeter Stress Test Suite
          - task: Bash@3
            displayName: Stress Test
            inputs:
              targetType: 'inline'
              script: |
                source /etc/environment
                jmeter -n -t "automatedtesting/jmeter/StressTest.jmx" \
                  -Jresdir="automatedtesting/jmeter/book_ids.csv" \
                  -l "automatedtesting/jmeter/stressresults.jtl" \
                  -e -o "automatedtesting/jmeter/stressreport"

          # Archive the JMeter log files
          - task: ArchiveFiles@2
            displayName: Archive JMeter Log Files
            inputs:
              rootFolderOrFile: "automatedtesting/jmeter"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "jmeter-reports-$(Build.BuildId).zip"
              verbose: true

          # Publish the JMeter log files
          - task: PublishBuildArtifacts@1
            displayName: Publish JMeter Artifacts
            inputs:
              PathtoPublish: 'automatedtesting/jmeter'
              ArtifactName: 'jmeter-results'

  #--------------------------------------------#  
  # Selenium | Functional UI Tests
  - deployment: VMDeploy
    displayName: Selenium Tests
    environment:
      name: "test-vm"
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-uitests
            patterns: '**/*.zip'
            
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #!/bin/bash

                # Upgrade and install dependencies
                sudo apt-get update -y
                sudo apt-get upgrade -y
                sudo apt-get install -y python3.7
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                
                # Install virtualenv for Python3 if not already installed
                sudo apt-get install -y python3.7-venv

                # Install pip for Python3 if not already installed
                sudo apt-get install -y python3-pip

                # Create a virtual environment
                python3.7 -m venv venv
                source venv/bin/activate

                # Install selenium inside the virtual environment
                pip3.7 install selenium

                # Download and install Google Chrome
                wget -P /tmp https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
                sudo apt install -y /tmp/google-chrome-stable_current_amd64.deb
                rm /tmp/google-chrome-stable_current_amd64.deb

                # Set up app directory
                cd ~/
                DIR=/home/azureuser/app
                if [ ! -d "$DIR" ]; then
                    mkdir app
                fi

                # Move the test zip file and unzip it
                mv /home/azureuser/azagent/_work/1/drop-uitests/$(Build.BuildId)-uitests.zip app
                cd app
                unzip -o $(Build.BuildId)-uitests.zip

                # Starting Selenium tests using the virtual environment's Python
                echo "Starting Selenium Tests"
                python add_remove_from_cart.py >> selenium.log
                echo "Completed Selenium Tests. Check selenium.log for results."

                # Deactivate virtual environment
                deactivate

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/selenium.log'
              searchFolder: '/home/azureuser/app'
              mergeTestResults: true
              testRunTitle: 'Selenium Tests'

#--------------------------------------------#
# Monitoring Stage
#--------------------------------------------#
# Monitoring stage to set up Azure Monitor and configure alerts

- stage: Monitoring
  displayName: 'Configure Monitoring and Alerts'
  jobs:
    - job: ConfigureAzureMonitor
      displayName: 'Configure Azure Monitor and Alerts'
      pool:
        name: 'myAgentPool'
      steps:
        # Step 1: Configure custom log ingestion into Azure Monitor (Log Analytics workspace)
        - task: AzureCLI@2
          inputs:
            azureSubscription: '$(azureServiceConnectionId)'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              # Create a custom data collection rule to ingest selenium logs into Log Analytics
              az monitor diagnostic-settings create \
                --name 'selenium-log-settings' \
                --resource '/subscriptions/$(azureServiceConnectionId)/resourceGroups/$(backendAzureRmResourceGroupName)/providers/Microsoft.Compute/virtualMachines/$(environmentName)' \
                --workspace '/subscriptions/$(azureServiceConnectionId)/resourceGroups/$(backendAzureRmResourceGroupName)/providers/Microsoft.OperationalInsights/workspaces/$(workspace-name)' \
                --logs '[{"category": "CustomLogs", "enabled": true, "retentionPolicy": {"enabled": true, "days": 30}}]' \
                --log '/home/azureuser/app/selenium.log'  # Specify the path to selenium.log file on the VM

        # Step 2: Verify alert logic and set the condition for triggering the alert based on custom log query
        - task: AzureCLI@2
          inputs:
            azureSubscription: '$(azureServiceConnectionId)'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              # Create a log-based alert for failed Selenium tests based on the custom log category and log path
              az monitor log-analytics alert rule create \
                --name 'Selenium Test Failure Alert' \
                --resource-group '$(backendAzureRmResourceGroupName)' \
                --workspace '/subscriptions/$(azureServiceConnectionId)/resourceGroups/$(backendAzureRmResourceGroupName)/providers/Microsoft.OperationalInsights/workspaces/$(workspace-name)' \
                --description 'Alert triggered when selenium tests fail' \
                --query "CustomLogs | where Message contains 'Error' or Message contains 'FAIL'"  # Example query for failed tests in selenium.log
                --severity 3 \
                --action-group '$(email)'  # Replace $(email) with the action group's name or email ID

        # Step 3: Verify that the alert is enabled and properly configured to notify the student via email
        - task: AzureCLI@2
          inputs:
            azureSubscription: '$(azureServiceConnectionId)'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              # Check if the alert rule is created and enabled
              az monitor log-analytics alert rule show \
                --resource-group '$(backendAzureRmResourceGroupName)' \
                --workspace '/subscriptions/$(azureServiceConnectionId)/resourceGroups/$(backendAzureRmResourceGroupName)/providers/Microsoft.OperationalInsights/workspaces/$(workspace-name)' \
                --name 'Selenium Test Failure Alert'
            
        # Step 4: Configure Azure Monitor to enable logging for the VM in the Azure Portal and aggregate events
        - task: AzureCLI@2
          inputs:
            azureSubscription: '$(azureServiceConnectionId)'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              # Ensure logging is enabled for the VM and aggregate custom application events for troubleshooting
              az monitor diagnostic-settings create \
                --name 'vm-log-settings' \
                --resource '/subscriptions/$(azureServiceConnectionId)/resourceGroups/$(backendAzureRmResourceGroupName)/providers/Microsoft.Compute/virtualMachines/$(environmentName)' \
                --workspace '/subscriptions/$(azureServiceConnectionId)/resourceGroups/$(backendAzureRmResourceGroupName)/providers/Microsoft.OperationalInsights/workspaces/$(workspace-name)' \
                --logs '[{"category": "VMGuestLogs", "enabled": true}]'

        # Step 5: Configure custom logging and ensure UTF-8 encoding for selenium.log to ensure correct ingestion
        - task: AzureCLI@2
          inputs:
            azureSubscription: '$(azureServiceConnectionId)'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              # Ensure the selenium.log file is in UTF-8 format for proper ingestion
              iconv -f ISO-8859-1 -t UTF-8 /home/azureuser/app/selenium.log -o /home/azureuser/app/selenium_utf8.log
              # Move the converted log file to a location for ingestion
              mv /home/azureuser/app/selenium_utf8.log /home/azureuser/app/selenium.log
